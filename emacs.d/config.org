#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle config.el

* Table of Contents
:PROPERTIES:
:TOC: :include all :ignore this
:END:
:CONTENTS:
:END:

* Prelude

#+begin_src emacs-lisp
  ;;; init.el --- Summary
  ;;; Commentary:
  ;;; Code:

  ;; -*- lexical-binding: t; -*-
#+end_src

* System Settings

** Performance

#+begin_src emacs-lisp

  (setq gc-cons-threshold (* 50 1000 1000))

#+end_src

** Settings

#+begin_src emacs-lisp

  ;; Disable package.el in favor of straight.el
  (setq package-enable-at-startup nil)

  (defun customizations/system-settings-get (setting)
    (alist-get setting customizations/system-settings))

  (require 'map)

  (setq customizations/system-settings
        (map-merge
          'list
          '((desktop/dpi . 180)
            (emacs/default-face-size . 220)
            (emacs/variable-face-size . 245)
            (emacs/fixed-face-size . 200)
            (polybar/height . 35)
            (polybar/font-0-size . 18)
            (polybar/font-1-size . 14)
            (polybar/font-2-size . 20)
            (polybar/font-3-size . 13)
            (dunst/font-size . 20)
            (dunst/max-icon-size . 88)
            (vimb/default-zoom 180)
            (qutebrowser/default-zoom . 200))))

#+end_src

* Package Management

#+begin_src emacs-lisp

  (unless (featurep 'straight))

  (defvar bootstrap-version)
  (let ((bootstrap-file
        (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 5))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
	  (url-retrieve-synchronously
	   "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	   'silent 'inhibit-cookies)
	(goto-char (point-max))
	(eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (straight-use-package 'use-package)
    

#+end_src

* PATH Environment

#+begin_src emacs-lisp
  (use-package exec-path-from-shell
    :straight t)

  (when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+end_src

* Debugging

Uncomment this to see debugging information about the execution of =init.el= file.

#+begin_src emacs-lisp

  (setq debug-on-error 1)

#+end_src

* Theme

I use the dracula theme for my styling

#+begin_src emacs-lisp

  (use-package dracula-theme
    :straight t
    :init
    (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
    (load-theme 'dracula t))

#+end_src

** Fonts

#+begin_src emacs-lisp

  (pcase system-type
    ((or 'gnu/linux 'windows-nt 'cygwin)
     (set-face-attribute 'default nil
			 :font "JetBrains Mono"
			 :weight 'light
			 :height (customizations/system-settings-get 'emacs/default-face-size)))
    ('darwin (set-face-attribute 'default nil :font "Fira Code" :height 170)))

  (set-face-attribute 'fixed-pitch nil
	    :font "JetBrains Mono"
	    :weight 'light
	    :height (customizations/system-settings-get 'emacs/fixed-face-size))

  (set-face-attribute 'variable-pitch nil
		      :font "JetBrains Mono"
		      :weight 'light
		      :height (customizations/system-settings-get 'emacs/fixed-face-size))

  (set-face-attribute 'variable-pitch nil
		      :font "Iosevka Aile"
		      :height (customizations/system-settings-get 'emacs/fixed-face-size)
		      :weight 'light)

#+end_src

* General Configuration

Customizations Path

#+begin_src emacs-lisp

  (push "~/.emacs.d/customizations" load-path)
  
#+end_src

Use server mode

#+begin_src emacs-lisp

  (server-start)
  
#+end_src

Use UTF-8 as the default encoding

#+begin_src emacs-lisp

  (set-default-coding-systems 'utf-8)
  
#+end_src

Clean up the emacs UI to make it more minimal.

#+begin_src emacs-lisp

  (setq inhibit-startup-message t)

  (scroll-bar-mode -1)
  (tool-bar-mode -1)
  (tooltip-mode -1)
  (set-fringe-mode 10)
  (menu-bar-mode -1)

#+end_src

Maximize windows by default

#+begin_src emacs-lisp

  (set-frame-parameter (selected-frame) 'fullscreen 'maximized)
  (add-to-list 'default-frame-alist '(fullscreen . maximized))

#+end_src

Enable line numbers and customize their format

#+begin_src emacs-lisp

  (dolist (mode '(text-mode-hook
		  prog-mode-hook
		  conf-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1)
		     (setq display-line-numbers-type 'relative))))

  (dolist (mode '(org-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 1))))


  (setq display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)
#+end_src

Don't warn for large files (shows up when launching videos)

#+begin_src emacs-lisp

  (setq large-file-warning-threshold nil)
  
#+end_src

Don't warn for following symlinked files

#+begin_src emacs-lisp

  (setq vc-follow-symlinks t)
  
#+end_src

Don't warn when advise is added for functions

#+begin_src emacs-lisp

  (setq ad-redefinition-action 'accept)
  
#+end_src

** Emojis in Buffers

#+begin_src emacs-lisp

  (use-package emojify
    :straight t)

#+end_src

** Modeline

*** Basic Configuration

#+begin_src emacs-lisp

  (setq display-time-format "%l:%M %p %b %y"
	display-time-default-load-average nil)

#+end_src

*** Doom Modeline

#+begin_src emacs-lisp

  (use-package all-the-icons
    :straight t)

  (use-package minions
    :straight t)

  (use-package doom-modeline
    :straight t
    :init
    (doom-modeline-mode 1)
    :custom
    (doom-modeline-height 15)
    (doom-modeline-bar-width 6)
    (doom-modeline-lsp t)
    (doom-modeline-github nil)
    (doom-modeline-mu4e nil)
    (doom-modeline-minor-modes t)
    (doom-modeline-persp-name nil)
    (doom-modeline-buffer-file-name-style 'truncate-except-project)
    (doom-modeline-major-mode-icon nil))

  ;; look into doom-modeline-github, it requires ghub and async
  (custom-set-faces '(mode-line ((t (:height 0.85))))
		    '(mode-line-inactive ((t (:height 0.85)))))

#+end_src

** Diminished Modes

Used because I don't want my mode line cluttered with a bunch of modes that aren't important.

#+begin_src emacs-lisp

  (use-package diminish
    :straight t)

#+end_src

** Auto-Reverting Changed Files

#+begin_src emacs-lisp

  (use-package super-save
    :straight t
    :custom
    (super-save-auto-mode-when-idle t)
    :init
    (super-save-mode +1)
    (diminish 'super-save-mode))

#+end_src

** Auto-saving Changed Files

#+begin_src emacs-lisp

  (setq global-auto-revert-non-file-buffers t)
  (global-hl-line-mode 1)
  (global-auto-revert-mode 1)

#+end_src

** Displaying World Time

=display-time-world= command provides a nice display of the time at a specified list
of timezones. Nice for working in a time with remote members.

#+begin_src emacs-lisp

  (setq display-time-world-list
	'(("Etc/UTC" "UTC")
	  ("America/Denver" "Denver")
	  ("America/Los_Angeles" "Los Angeles")
	  ("America/New_York" "New York")))
  (setq display-time-world-time-format "%a, %d %b %I:%M %p %Z")

#+end_src

** Whitespace Settings

Use spaces instead of tabs for indention

#+begin_src emacs-lisp

  (setq-default indent-tabs-mode nil)
  
#+end_src

Automatically clean whitespace

#+begin_src emacs-lisp

;;  (use-package ws-butler
;;    :straight t
;;    :hook
;;    (text-mode . ws-butler-mode)
;;    (prog-mode . ws-butler-mode))

#+end_src

* Keyboard Bindings

** Keybinding Panel (which-key)

#+begin_src emacs-lisp

  (use-package which-key
    :straight t
    :init
    (diminish 'which-key-mode)
    (which-key-mode)
    :custom (which-key-idle-delay 0.3))

#+end_src

* Terminal

#+begin_src emacs-lisp

  (use-package vterm
    :straight t
    :custom
    (vterm-max-scrollback 100000)
    :bind
    ( :map vterm-mode-map
    ("C-c C-e" . vterm-copy-mode)
    ("C-c C-n" . customizations/vterm-next-prompt)
    ("C-c C-p" . customizations/vterm-previous-prompt)
    ;; Disabled vterm keybindings: (in order to use their global values)
    ("M-m" . nil)
    ("M-u" . nil)
    ("M-j" . nil)
    ("<f1>" . nil)
    ("C-M-s" . nil)
    :map vterm-copy-mode-map
    ("C-c C-e" . vterm-copy-mode)
    ("C-c C-c" . vterm-copy-mode))
;;    ("M-n" . customizations/vterm-next-prompt)
;;    ("M-p" . customizations/vterm-previous-prompt))
    :hook
    (vterm-mode . (lambda () (setq-local global-hl-line-mode nil
                                         show-trailing-whitespace nil)))
    (vterm-mode . hack-dir-local-variables-non-file-buffer)
    (vterm-copy-mode . (lambda ()
                       (call-interactively 'hl-line-mode))))
    

#+end_src

* Coding

** Projectile

#+begin_src emacs-lisp

  (use-package projectile
    :straight t
    :custom
;;    (projectile-auto-discover nil)
;;    (projectile-project-search-path (directory-files (concat (getenv "HOME") "/Projects") t "[^.]|[.DS_Store]"))
    (projectile-kill-buffers-filter 'kill-only-files)
    (projectile-ignored-project-function
     (lambda (project-root)
       ;; ignore mac .DS_Store files
       (string= (file-name-nondirectory project-root) ".DS_Store")))
    :bind*
    ("C-M-t" . customizations/projectile-vterm)
    :hook
    (dashboard-after-initialize . projectile-mode)
    :config
    (defun customizations/projectile-vterm ()
      "Open `vterm' in project root directory."
      (interactive)
      (let* ((default-directory (or (projectile-project-root) default-directory))
             (project-name (projectile-project-name default-directory))
             (buffer-name (format "vterm @%s" project-name))
             (buffer (get-buffer buffer-name)))
        (if (or (not buffer) (eq buffer (current-buffer)))
            (vterm buffer-name)
            (switch-to-buffer buffer)))))

#+end_src

** File Browsing

#+begin_src emacs-lisp

  (use-package treemacs
    :straight t
    :custom
    (treemacs-width 20)
    :bind
    ("M-0" . treemacs-select-window))

  (use-package treemacs-projectile
    :after treemacs projectile)

#+end_src

** Code Folding

Use origami for folding

#+begin_src emacs-lisp

  (use-package origami
    :straight t
    :hook (yaml-mode . origami-mode))

#+end_src

** Code Completion

#+begin_src emacs-lisp

  (use-package lsp-mode
    :straight t
    :commands lsp
    :hook
    (elisp-mode . lsp-deferred)
    (lsp-mode . lsp-enable-which-key-integration))

  (use-package lsp-ui
    :straight t
    :after lsp-mode
    :custom
    (lsp-ui-sideline-show-code-actions t)
    (lsp-ui-sideline-show-hover t)
    (lsp-ui-sideline-update-mode 'line)
    (lsp-ui-doc-position 'at-point)
    (lsp-ui-sideline-delay 0.5)
    (lsp-ui-peek-always-show t)
    (lsp-ui-peek-fontify 'always))

#+end_src

** Debugging

** Text Completion

#+begin_src emacs-lisp

  (use-package company
    :straight t
    :custom
    (company-idle-delay 0)
    (company-minimum-prefix-length 3)
    (company-tooltip-align-annotations t)
    (company-dabbrev-other-buffers t)
    :bind
      (:map company-active-map
            ("RET" . nil)
            ([return] . nil)
            ("C-w" . nil)
            ("TAB" . company-complete-selection)
            ("<tab>" . company-complete-selection))
    :hook
    (dashboard-after-initialize . global-company-mode)
    :config
    (add-to-list 'company-begin-commands 'backward-delete-char-untabify))

#+end_src

** Diagnostics/Linting

#+begin_src emacs-lisp

  (use-package flycheck
    :straight t
    :custom (flycheck-emacs-lisp-load-path 'inherit)
    :init
    (add-hook 'after-init-hook #'global-flycheck-mode))
;;    (add-hook 'after-init-hook #'global-company-mode))

#+end_src

** Languages

*** Python

#+begin_src emacs-lisp

  (use-package python
      :straight t)

#+end_src

*** Go

#+begin_src emacs-lisp

  (use-package go-mode
    :straight t)

  (add-hook 'go-mode-hook #'lsp-deferred)
  ;;    :hook
  ;;    (go-mode . 'lsp-deferred))
  ;;    (go-mode . 'company-mode))
  ;;    (go-mode . #'yas-minor-mode))

#+end_src

** File Types

*** Markdown

#+begin_src emacs-lisp

  (use-package markdown-mode
    :straight t)

#+end_src

*** YAML

#+begin_src emacs-lisp

  (use-package yaml-mode
    :straight t)

#+end_src

*** JSON

#+begin_src emacs-lisp

  (use-package json-mode
    :straight t)

#+end_src

*** Makefile

#+begin_src emacs-lisp

  (use-package make-mode
    :straight t)

#+end_src

* References

- [[https://dr-knz.net/a-tour-of-emacs-as-go-editor.html][A Tour of Emacs as my Go Editor]]
- [[https://geeksocket.in/posts/emacs-lsp-go/][How to setup Emacs LSP Mode for Go]]
- [[https://github.com/KaratasFurkan/.emacs.d][My Literate Emacs Config]]
- [[https://www.youtube.com/playlist?list=PLEoMzSkcN8oNvsrtk_iZSb94krGRofFjN][Emacs IDE]]

* TODO

- [ ] DAP/Debugging
- [ ] Compilation/Project Type
  - [ ] If a Makefile exists use that
  - [ ] If it's a go project use default go build
- [ ] Maggit integrations
  - [ ] Git Blame Integrations
- [ ] Github integration
- [ ] OrgMode
  - [ ] OrgAgenda
    - [ ] Daily Notes
  - [ ] OrgRoam
- [ ] Emacs Dashboard
- [ ] Dired
- [ ] Treemacs
  - [ ] Group file extensions together
  - [ ] Directories at the top
- [ ] LSP Mode
  - Error when creating new file and not using package completion for go
